M=[[1,0,0,0,0,0,0,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,1,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,1,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,1,0,0,0,0,0,1,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0,1,0,0,0],[0,0,0,1,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,1,0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,1,0,0,1,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,0,0,1,0,0],[0,0,0,0,0,1,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,1,0,0,1,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0,0,1]]

for i in range(18):
    print(M[i])

p = MixedIntegerLinearProgram(maximization=False)
v = p.new_variable(real=False)

p.set_objective(v[0]+v[1]+v[2]+v[3]+v[4]+v[5]+v[6]+v[7]+v[8]+v[9]+v[10]+v[11]+v[12]+v[13])

for i in range(18):
    p.add_constraint(1 <= M[i][0]*v[0] + M[i][1]*v[1] + M[i][2]*v[2] + M[i][3]*v[3] + M[i][4]*v[4] + M[i][5]*v[5] + M[i][6]*v[6] + M[i][7]*v[7] + M[i][8]*v[8] + M[i][9]*v[9] + M[i][10]*v[10] + M[i][11]*v[11] + M[i][12]*v[12] + M[i][13]*v[13] <= 1)

p.show()
p.solve()
p.get_values(v)
